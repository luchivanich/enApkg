// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ApkgCreator;
//
//    var ankiColConfig = AnkiColConfig.FromJson(jsonString);

namespace ApkgCreator
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AnkiColConfig
    {
        [JsonProperty("nextPos")]
        public long NextPos { get; set; }

        [JsonProperty("estTimes")]
        public bool EstTimes { get; set; }

        [JsonProperty("activeDecks")]
        public List<long> ActiveDecks { get; set; }

        [JsonProperty("sortType")]
        public string SortType { get; set; }

        [JsonProperty("timeLim")]
        public long TimeLim { get; set; }

        [JsonProperty("sortBackwards")]
        public bool SortBackwards { get; set; }

        [JsonProperty("addToCur")]
        public bool AddToCur { get; set; }

        [JsonProperty("curDeck")]
        public long CurDeck { get; set; }

        [JsonProperty("newBury")]
        public bool NewBury { get; set; }

        [JsonProperty("newSpread")]
        public long NewSpread { get; set; }

        [JsonProperty("dueCounts")]
        public bool DueCounts { get; set; }

        [JsonProperty("curModel")]
        public string CurModel { get; set; }

        [JsonProperty("collapseTime")]
        public long CollapseTime { get; set; }
    }

    public partial class AnkiColConfig
    {
        public static AnkiColConfig FromJson(string json) => JsonConvert.DeserializeObject<AnkiColConfig>(json, ApkgCreator.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AnkiColConfig self) => JsonConvert.SerializeObject(self, ApkgCreator.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
