// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var oxfordDictionaryEntity = OxfordDictionaryEntity.FromJson(jsonString);

namespace OxfordDictionaries
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OxfordDictionaryEntity
    {
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Metadata
    {
        [JsonProperty("provider")]
        public string Provider { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("lexicalEntries")]
        public List<LexicalEntry> LexicalEntries { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("word")]
        public string Word { get; set; }
    }

    public partial class LexicalEntry
    {
        [JsonProperty("derivatives")]
        public List<Derivative> Derivatives { get; set; }

        [JsonProperty("entries")]
        public List<Entry> Entries { get; set; }

        [JsonProperty("language")]
        public string Language { get; set; }

        [JsonProperty("lexicalCategory")]
        public string LexicalCategory { get; set; }

        [JsonProperty("pronunciations")]
        public List<Pronunciation> Pronunciations { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Derivative
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Entry
    {
        [JsonProperty("etymologies", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Etymologies { get; set; }

        [JsonProperty("grammaticalFeatures")]
        public List<GrammaticalFeature> GrammaticalFeatures { get; set; }

        [JsonProperty("homographNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long HomographNumber { get; set; }

        [JsonProperty("senses")]
        public List<Sense> Senses { get; set; }
    }

    public partial class GrammaticalFeature
    {
        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Sense
    {
        [JsonProperty("definitions", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Definitions { get; set; }

        [JsonProperty("examples", NullValueHandling = NullValueHandling.Ignore)]
        public List<Example> Examples { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("short_definitions", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> ShortDefinitions { get; set; }

        [JsonProperty("subsenses", NullValueHandling = NullValueHandling.Ignore)]
        public List<Subsense> Subsenses { get; set; }

        [JsonProperty("thesaurusLinks", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThesaurusLink> ThesaurusLinks { get; set; }

        [JsonProperty("crossReferenceMarkers", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> CrossReferenceMarkers { get; set; }

        [JsonProperty("crossReferences", NullValueHandling = NullValueHandling.Ignore)]
        public List<CrossReference> CrossReferences { get; set; }

        [JsonProperty("variantForms", NullValueHandling = NullValueHandling.Ignore)]
        public List<Example> VariantForms { get; set; }

        [JsonProperty("domains", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Domains { get; set; }
    }

    public partial class CrossReference
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class Example
    {
        [JsonProperty("text")]
        public string Text { get; set; }
    }

    public partial class Subsense
    {
        [JsonProperty("definitions")]
        public List<string> Definitions { get; set; }

        [JsonProperty("examples", NullValueHandling = NullValueHandling.Ignore)]
        public List<Example> Examples { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("short_definitions")]
        public List<string> ShortDefinitions { get; set; }

        [JsonProperty("thesaurusLinks", NullValueHandling = NullValueHandling.Ignore)]
        public List<ThesaurusLink> ThesaurusLinks { get; set; }

        [JsonProperty("domains", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Domains { get; set; }

        [JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        public List<GrammaticalFeature> Notes { get; set; }
    }

    public partial class ThesaurusLink
    {
        [JsonProperty("entry_id")]
        public string EntryId { get; set; }

        [JsonProperty("sense_id")]
        public string SenseId { get; set; }
    }

    public partial class Pronunciation
    {
        [JsonProperty("audioFile")]
        public Uri AudioFile { get; set; }

        [JsonProperty("dialects")]
        public List<string> Dialects { get; set; }

        [JsonProperty("phoneticNotation")]
        public string PhoneticNotation { get; set; }

        [JsonProperty("phoneticSpelling")]
        public string PhoneticSpelling { get; set; }
    }

    public partial class OxfordDictionaryEntity
    {
        public static OxfordDictionaryEntity FromJson(string json) => JsonConvert.DeserializeObject<OxfordDictionaryEntity>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OxfordDictionaryEntity self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
